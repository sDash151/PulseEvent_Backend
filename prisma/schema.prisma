// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  name               String
  email              String         @unique
  password           String
  role               String         @default("attendee")
  events             Event[]        // Hosted events
  rsvps              Rsvp[]         // RSVP confirmations
  feedbacks          Feedback[]     // Submitted feedback
  sentInvitations    Invitation[]   @relation("SentInvitations") // Invitations sent by user
  receivedInvitations Invitation[]   @relation("ReceivedInvitations") // Fixed: Invitations received by user
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Event {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  location      String
  startTime     DateTime
  endTime       DateTime
  rsvpDeadline  DateTime
  maxAttendees  Int
  host          User           @relation(fields: [hostId], references: [id])
  hostId        Int
  rsvps         Rsvp[]
  feedbacks     Feedback[]
  invitations   Invitation[]   // All invitations for this event
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([hostId])
}

model Rsvp {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  checkedIn Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(250)
  emoji     String?
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  isPinned  Boolean  @default(false)
  isFlagged Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([userId])
}

model Invitation {
  id            Int       @id @default(autoincrement())
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       Int
  email         String    // Invited user's email
  invitedBy     User      @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedById   Int
  invitedUser   User?     @relation("ReceivedInvitations", fields: [invitedUserId], references: [id])
  invitedUserId Int?      // Optional link to registered user
  status        String    @default("pending") // "pending", "accepted", "declined"
  token         String    @unique @default(uuid()) // Added for secure invitation links
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([eventId])
  @@index([email])
  @@index([invitedById])
  @@index([invitedUserId])
  @@unique([eventId, email]) // Prevent duplicate invites
}