generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  name                String
  email               String       @unique
  password            String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  role                String       @default("attendee")
  avatar              String?
  events              Event[]
  feedbacks           Feedback[]
  sentInvitations     Invitation[] @relation("SentInvitations")
  receivedInvitations Invitation[] @relation("ReceivedInvitations")
  rsvps               Rsvp[]
}

model Event {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  location     String
  startTime    DateTime
  endTime      DateTime
  rsvpDeadline DateTime
  maxAttendees Int
  hostId       Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  host         User         @relation(fields: [hostId], references: [id])
  feedbacks    Feedback[]
  invitations  Invitation[]
  rsvps        Rsvp[]

  @@index([hostId])
}

model Rsvp {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  checkedIn Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(250)
  emoji     String?
  eventId   Int
  userId    Int
  isPinned  Boolean  @default(false)
  isFlagged Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model Invitation {
  id            Int      @id @default(autoincrement())
  eventId       Int
  email         String
  invitedById   Int
  invitedUserId Int?
  status        String   @default("pending")
  token         String   @unique @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event    @relation(fields: [eventId], references: [id])
  invitedBy     User     @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedUser   User?    @relation("ReceivedInvitations", fields: [invitedUserId], references: [id])

  @@unique([eventId, email])
  @@index([eventId])
  @@index([email])
  @@index([invitedById])
  @@index([invitedUserId])
}
