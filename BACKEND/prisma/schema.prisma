enum EventType {
  STANDALONE
  MEGA
  SUB
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  name                String
  email               String       @unique
  password            String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  role                String       @default("attendee")
  avatar              String?
  events              Event[]
  feedbacks           Feedback[]
  sentInvitations     Invitation[] @relation("SentInvitations")
  receivedInvitations Invitation[] @relation("ReceivedInvitations")
  rsvps               Rsvp[]
  registrations       Registration[]
  waitingList         WaitingList[]
  whatsAppNotifications WhatsAppNotification[]
  verified            Boolean      @default(false) // <-- Added for email verification
  emailVerificationTokens EmailVerificationToken[] // <-- Added for relation
  passwordResetTokens PasswordResetToken[] // <-- Added for password reset relation
  passwordChangedAt DateTime? // <-- Used for session invalidation after password reset
}

model Event {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  location      String
  startTime     DateTime
  endTime       DateTime
  rsvpDeadline  DateTime
  maxAttendees  Int
  hostId        Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  host          User         @relation(fields: [hostId], references: [id])
  feedbacks     Feedback[]
  invitations   Invitation[]
  rsvps         Rsvp[]
  parentEventId Int?
  parentEvent   Event?       @relation("MegaEventToSubEvents", fields: [parentEventId], references: [id])
  subEvents     Event[]      @relation("MegaEventToSubEvents")
  registrations Registration[]
  waitingList   WaitingList[]
  whatsAppNotifications WhatsAppNotification[]

  type           EventType @default(STANDALONE)
  paymentEnabled Boolean   @default(false) // Optional: for future payment integration
  paymentProofRequired Boolean @default(false) // Whether payment proof is required for registration
  qrCode         String?   // URL to QR code image for payment
  customFields   Json?
  teamSize       Int?      // Optional: maximum team size for team events
  teamSizeMin    Int?      // Optional: minimum team size for flexible team events
  teamSizeMax    Int?      // Optional: maximum team size for flexible team events
  flexibleTeamSize Boolean @default(false) // Whether team size is flexible
  whatsappGroupEnabled Boolean @default(false) // Whether WhatsApp group is enabled
  whatsappGroupLink String? // WhatsApp group invite link

  @@index([hostId])
  @@index([parentEventId])
}

model Rsvp {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  checkedIn Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(250)
  emoji     String?
  eventId   Int
  userId    Int
  isPinned  Boolean  @default(false)
  isFlagged Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model Invitation {
  id            Int      @id @default(autoincrement())
  eventId       Int
  email         String
  invitedById   Int
  invitedUserId Int?
  status        String   @default("pending")
  token         String   @unique @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event    @relation(fields: [eventId], references: [id])
  invitedBy     User     @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedUser   User?    @relation("ReceivedInvitations", fields: [invitedUserId], references: [id])

  @@unique([eventId, email])
  @@index([eventId])
  @@index([email])
  @@index([invitedById])
  @@index([invitedUserId])
}

model Registration {
  id           Int      @id @default(autoincrement())
  eventId      Int
  userId       Int?     // For individual registration, optional for team
  teamName     String?
  responses    Json?   // Dynamic answers to custom fields
  paymentProof String? // URL to payment screenshot
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  event        Event    @relation(fields: [eventId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])
  participants Participant[]

  @@index([eventId])
  @@index([userId])
}

model WaitingList {
  id           Int      @id @default(autoincrement())
  eventId      Int
  userId       Int
  teamName     String?
  responses    Json?   // Dynamic answers to custom fields
  participants Json?   // Participant details for team events
  paymentProof String? // URL to payment screenshot
  status       String   @default("pending") // "pending", "approved", "rejected"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  event        Event    @relation(fields: [eventId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model Participant {
  id             Int      @id @default(autoincrement())
  registrationId Int
  details        Json?   // Dynamic participant info (name, email, etc.)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  registration   Registration @relation(fields: [registrationId], references: [id])

  @@index([registrationId])
}

model WhatsAppNotification {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  eventTitle String
  whatsappGroupLink String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique // Stores a hash of the token, not the raw token
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}